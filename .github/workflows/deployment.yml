name: Provision, Build, and Deploy to GKE

on:
  push:
    branches: [ "dev" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}        # Your GCP Project ID stored in GitHub Secrets
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}       # Name of your GKE cluster stored in GitHub Secrets
  GKE_ZONE: ${{ secrets.GKE_ZONE }}             # Zone of your GKE cluster stored in GitHub Secrets
  DEPLOYMENT_NAME: ${{ secrets.DEPLOYMENT_NAME }} # Name of your Kubernetes Deployment stored in GitHub Secrets
  GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }} # GCP credentials stored in GitHub Secrets

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'
      
    steps:
      # Step 1: Checkout the repo
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0
  
      # Step 3: Authenticate to GCP
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          
      # Step 4: Initialize Terraform
      - name: Terraform Init
        run: terraform init

      # Step 5: Validate Terraform configuration
      - name: Terraform Validate
        run: terraform validate

      # Step 6: Plan Terraform changes
      - name: Terraform Plan
        run: terraform plan -input=false -var="project_id=$PROJECT_ID" -var="gcp_credentials=$GCP_CREDENTIALS"

      # Step 7: Apply Terraform changes
      - name: Terraform Apply
        # add a run job that connects to the cluster
        run: terraform apply -auto-approve -var="project_id=$PROJECT_ID" -var="gcp_credentials=$GCP_CREDENTIALS"
    

        
  build_deploy:
    needs: terraform
    runs-on: ubuntu-latest
    environment: production


    steps:
      # Step 1: Checkout the repo
      - name: Checkout code
        uses: actions/checkout@v4

      
      # Step 2: Authenticate to GCP and Set up GKE credentials
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER }}
          location: ${{ secrets.GKE_ZONE }}
          project_id: ${{ secrets.GKE_PROJECT }}    

      # Step 2: Set up Docker
      - name: Set up Docker
        run: |-
          sudo apt-get update
          sudo apt-get install -y docker.io

      # Step 3: Build the Docker image
      - name: Build Docker image
        run: |-
          docker build -t timeapi:latest .



      # Step 4: Deploy to GKE
      - name: Deploy to GKE
        run: |-
              kubectl set image deployment/$DEPLOYMENT_NAME time-api-container=timeapi:latest
              kubectl rollout status deployment/$DEPLOYMENT_NAME

      # Step 6: Verify that the API is accessible
      - name: Verify API Endpoint
        run: |
          wait_for_ip() {
            local service_name=$1
            local timeout=$2
            local interval=5
            local elapsed=0

            while [ $elapsed -lt $timeout ]; do
              EXTERNAL_IP=$(kubectl get svc $service_name -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
              if [ -n "$EXTERNAL_IP" ]; then
                echo "Service External IP: $EXTERNAL_IP"
                return 0
              fi
              echo "Waiting for external IP... (elapsed: ${elapsed}s)"
              sleep $interval
              elapsed=$((elapsed + interval))
            done

            echo "Error: Timed out waiting for external IP after ${timeout}s."
            return 1
          }

          TIMEOUT=300

          if ! wait_for_ip "$DEPLOYMENT_NAME" $TIMEOUT; then
            exit 1
          fi

          RESPONSE=$(curl -s --fail "http://$EXTERNAL_IP/")
          if [ -z "$RESPONSE" ]; then
            echo "Error: No response from API."
            exit 1
          fi

          echo "API Response: $RESPONSE"
