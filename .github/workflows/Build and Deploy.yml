name: Build and Deploy to GKE

on:
  workflow_dispatch:  # Allows manual triggering of the workflow

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}        # GCP Project ID stored in GitHub Secrets
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}       # Name of the GKE cluster stored in GitHub Secrets
  GKE_ZONE: ${{ secrets.GKE_ZONE }}             # Zone of the GKE cluster stored in GitHub Secrets
  DEPLOYMENT_NAME: ${{ secrets.DEPLOYMENT_NAME }} # Name of the Kubernetes Deployment stored in GitHub Secrets
  GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }} # GCP credentials stored in GitHub Secrets

jobs:
  build_deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Authenticate to Google Cloud
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      # Step 3: Set up GKE credentials to access the cluster
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER }}
          location: ${{ secrets.GKE_ZONE }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Step 4: Set up Docker Buildx for building the image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 5: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t timeapi:latest .

      # Step 6: Apply the Kubernetes deployment configuration
      - name: Apply Kubernetes Deployment
        run: |
          # Ensure the Kubernetes namespace exists
          kubectl create namespace timeapi-namespace --dry-run=client -o yaml | kubectl apply -f -

          # Apply the deployment file to create/update resources
          kubectl apply -f deployment.yml

      # Step 7: Update the deployment image to the latest built image
      - name: Deploy to GKE
        run: |
          kubectl set image Deployment/${{ secrets.DEPLOYMENT_NAME }} time-api-container=timeapi:latest
          kubectl rollout status Deployment/${{ secrets.DEPLOYMENT_NAME }} --namespace=timeapi-namespace

      # Step 8: Verify API Endpoint
      - name: Verify API Endpoint
        run: |
          wait_for_ip() {
            local service_name=$1
            local timeout=$2
            local interval=5
            local elapsed=0

            while [ $elapsed -lt $timeout ]; do
              EXTERNAL_IP=$(kubectl get svc $service_name -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
              if [ -n "$EXTERNAL_IP" ]; then
                echo "Service External IP: $EXTERNAL_IP"
                return 0
              fi
              echo "Waiting for external IP... (elapsed: ${elapsed}s)"
              sleep $interval
              elapsed=$((elapsed + interval))
            done

            echo "Error: Timed out waiting for external IP after ${timeout}s."
            return 1
          }

          TIMEOUT=300  # 5 minutes timeout

          if ! wait_for_ip "my-api-service" $TIMEOUT; then
            exit 1
          fi

          RESPONSE=$(curl -s --fail "http://$EXTERNAL_IP/time")
          if [ -z "$RESPONSE" ]; then
            echo "Error: No response from API."
            exit 1
          fi

          echo "API Response: $RESPONSE"
