name: Build and Deploy to GKE

on:
  workflow_dispatch:  # This allows manual triggering

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}        # Your GCP Project ID stored in GitHub Secrets
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}       # Name of your GKE cluster stored in GitHub Secrets
  GKE_ZONE: ${{ secrets.GKE_ZONE }}             # Zone of your GKE cluster stored in GitHub Secrets
  DEPLOYMENT_NAME: ${{ secrets.DEPLOYMENT_NAME }} # Name of your Kubernetes Deployment stored in GitHub Secrets
  GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }} # GCP credentials stored in GitHub Secrets

jobs:
  build_deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER }}
          location: ${{ secrets.GKE_ZONE }}
          project_id: ${{ secrets.GKE_PROJECT }}


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |-
          docker build -t timeapi:latest .

      - name: Deploy to GKE
        run: |-
          kubectl apply -f k8s/deployment.yml
          kubectl rollout status deployment/$DEPLOYMENT_NAME

      - name: Verify API Endpoint
        run: |
          wait_for_ip() {
            local service_name=$1
            local timeout=$2
            local interval=5
            local elapsed=0

            while [ $elapsed -lt $timeout ]; do
              EXTERNAL_IP=$(kubectl get svc $service_name -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
              if [ -n "$EXTERNAL_IP" ]; then
                echo "Service External IP: $EXTERNAL_IP"
                return 0
              fi
              echo "Waiting for external IP... (elapsed: ${elapsed}s)"
              sleep $interval
              elapsed=$((elapsed + interval))
            done

            echo "Error: Timed out waiting for external IP after ${timeout}s."
            return 1
          }

          TIMEOUT=300

          if ! wait_for_ip "$DEPLOYMENT_NAME" $TIMEOUT; then
            exit 1
          fi

          RESPONSE=$(curl -s --fail "http://$EXTERNAL_IP/")
          if [ -z "$RESPONSE" ]; then
            echo "Error: No response from API."
            exit 1
          fi

          echo "API Response: $RESPONSE"
